From 292e0b3b598806f53f821c324b053fab8f08dc23 Mon Sep 17 00:00:00 2001
From: hienhuynh <hien.huynh.px@renesas.com>
Date: Wed, 30 Jun 2021 11:35:11 +0700
Subject: [PATCH] plat: rzg: add support SECURE BOOT for RZ/G2 Platform

This commit adds support SECURE BOOT for RZ/G2 Platform.

Signed-off-by: Takunori Otsuka <takunori.otsuka.ur@renesas.com>
Signed-off-by: hienhuynh <hien.huynh.px@renesas.com>
---
 drivers/renesas/common/auth/auth_mod.c        | 153 +++++++++++----
 drivers/renesas/common/io/io_rcar.c           |  39 ++--
 .../renesas/common/bl2_plat_mem_params_desc.c |  30 +++
 plat/renesas/common/include/platform_def.h    |  13 ++
 plat/renesas/common/include/rcar_def.h        |   3 +
 plat/renesas/common/plat_storage.c            | 183 ++----------------
 plat/renesas/rzg/platform.mk                  |  10 -
 tools/renesas/rzg_layout_create/sa6.c         |  38 ++++
 tools/renesas/rzg_layout_create/sa6.ld.S      | 128 +++++++-----
 9 files changed, 312 insertions(+), 285 deletions(-)

diff --git a/drivers/renesas/common/auth/auth_mod.c b/drivers/renesas/common/auth/auth_mod.c
index 4aa86e2a4..27df99f99 100644
--- a/drivers/renesas/common/auth/auth_mod.c
+++ b/drivers/renesas/common/auth/auth_mod.c
@@ -15,7 +15,6 @@
 #include <platform_def.h>
 #include "rom_api.h"
 
-typedef int32_t(*secure_boot_api_f) (uint32_t a, uint32_t b, void *c);
 extern int32_t rcar_get_certificate(const int32_t name, uint32_t *cert_addr);
 
 #define RCAR_IMAGE_ID_MAX	(10)
@@ -30,7 +29,62 @@ extern int32_t rcar_get_certificate(const int32_t name, uint32_t *cert_addr);
 #define SOFTMD_BOOTMODE_MASK	(0x00000001U)
 #define SOFTMD_NORMALBOOT	(0x1U)
 
-static secure_boot_api_f secure_boot_api;
+typedef int32_t (* fp_sec_module_api_t) (void);
+
+#if IMAGE_BL2 && RCAR_SECURE_BOOT
+
+#define SEC_MODULE_RET_OK (0)
+#define SEC_MODULE_SHARED_SIZE (0x200)
+
+typedef enum {
+	CMD_RESET_INIT = 0,
+	CMD_INJECT_KEY,
+	CMD_RE_ENC_DATA,
+	CMD_VERIFY_KEY,
+	CMD_VERIFY_DATA,
+	CMD_MAX,
+} e_cmd_type_t;
+
+typedef struct {
+	uint64_t inst_area;
+} st_reset_init_t;
+
+typedef struct {
+	uint64_t key_ring;
+	uint64_t prov_key;
+} st_inject_key_t;
+
+typedef struct {
+	int num;
+	struct {
+		uint64_t src;
+		uint64_t len;
+		uint64_t dst;
+	} list[16];
+} st_re_enc_data_t;
+
+typedef struct {
+	uint64_t src;
+	uint64_t len;
+	uint64_t dst;
+	uint64_t heap;
+} st_verify_data_t;
+
+typedef struct {
+	uint64_t cmd;
+	uint64_t len;
+	union {
+		st_reset_init_t reset_init;
+		st_inject_key_t inject_key;
+		st_re_enc_data_t re_enc_data;
+		st_verify_data_t verify_data;
+	} prm;
+} st_sec_module_arg_t;
+
+static st_sec_module_arg_t* secure_boot_arg;
+#endif
+
+static fp_sec_module_api_t  secure_boot_api;
 
 int auth_mod_get_parent_id(unsigned int img_id, unsigned int *parent_id)
 {
@@ -59,6 +113,8 @@ int auth_mod_verify_img(unsigned int img_id, void *ptr, unsigned int len)
 	};
 
 #if IMAGE_BL2
+	uint64_t auth_len;
+
 	switch (img_id) {
 	case TRUSTED_KEY_CERT_ID:
 	case SOC_FW_KEY_CERT_ID:
@@ -82,9 +138,6 @@ int auth_mod_verify_img(unsigned int img_id, void *ptr, unsigned int len)
 	case BL337_CERT_ID:
 	case BL338_CERT_ID:
 		return ret;
-	case BL31_IMAGE_ID:
-	case BL32_IMAGE_ID:
-	case BL33_IMAGE_ID:
 	case BL332_IMAGE_ID:
 	case BL333_IMAGE_ID:
 	case BL334_IMAGE_ID:
@@ -93,7 +146,47 @@ int auth_mod_verify_img(unsigned int img_id, void *ptr, unsigned int len)
 	case BL337_IMAGE_ID:
 	case BL338_IMAGE_ID:
 		goto verify_image;
+	case SEC_MODULE_ID:
+		/* Load Security Module to authenticate the program. */
+		secure_boot_arg = (st_sec_module_arg_t *) ptr;
+		secure_boot_api = (fp_sec_module_api_t)((uint64_t)ptr + SEC_MODULE_SHARED_SIZE);
+		return ret;
+
+	case SEC_KEYRING_ID:
+		/* Load the key ring and initialize Security Module. */
+		if (NULL == secure_boot_arg) {
+			ERROR("Security Module is not loaded.\n");
+			return -1;
+		}
+		secure_boot_arg->cmd = CMD_RESET_INIT;
+		secure_boot_arg->len = sizeof(st_reset_init_t);
+		(secure_boot_arg->prm).reset_init.inst_area = (uint64_t) ptr;
+		goto call_security_module;
+	case BL31_IMAGE_ID:
+	case BL32_IMAGE_ID:
+	case BL33_IMAGE_ID:
+		/* Authenticate the loaded program with Security Module. */
+		if (NULL == secure_boot_arg) {
+			ERROR("Security Module is not loaded.\n");
+			return -1;
+		}
+		/* The authentication length is placed in the header of the program to be authenticated. */
+		auth_len = *(uint64_t *)ptr;
+		if (len < auth_len) {
+			ERROR("The verification size is larger than the load image size.\n");
+			return -1;
+		}
+
+		secure_boot_arg->cmd = CMD_VERIFY_DATA;
+		secure_boot_arg->len = sizeof(st_verify_data_t);
+		(secure_boot_arg->prm).verify_data.len  = auth_len;
+		(secure_boot_arg->prm).verify_data.src  = (uint64_t)ptr + sizeof(uint64_t);
+		(secure_boot_arg->prm).verify_data.dst  = (uint64_t)ptr;
+		(secure_boot_arg->prm).verify_data.heap = (uint64_t)SEC_MODULE_HEAP;
+		goto call_security_module;
+
 	default:
+		ERROR("Unknown image id = %d\n", img_id);
 		return -1;
 	}
 
@@ -110,17 +203,23 @@ verify_image:
 		ERROR("Verification Failed for image id = %d\n", img_id);
 		return ret;
 	}
+
+call_security_module:
 #if RCAR_BL2_DCACHE == 1
 	/* clean and disable */
 	write_sctlr_el3(read_sctlr_el3() & ~SCTLR_C_BIT);
 	dcsw_op_all(DCCISW);
 #endif
-	ret = (mmio_read_32(RCAR_BOOT_KEY_CERT_NEW) == RCAR_CERT_MAGIC_NUM) ?
-	    secure_boot_api(RCAR_BOOT_KEY_CERT_NEW, cert_addr, NULL) :
-	    secure_boot_api(RCAR_BOOT_KEY_CERT, cert_addr, NULL);
-	if (ret)
-		ERROR("Verification Failed 0x%x, %s\n", ret, image[index].name);
-
+	/* Call Security Module */
+	if(SEC_MODULE_RET_OK != secure_boot_api())
+	{
+		ERROR("Verification Failed for image id = %d\n", img_id);
+		ret = -1;
+	}
+	else
+	{
+		NOTICE("Verification Successful for image id = %d\n", img_id);
+	}
 #if RCAR_BL2_DCACHE == 1
 	/* enable */
 	write_sctlr_el3(read_sctlr_el3() | SCTLR_C_BIT);
@@ -138,35 +237,11 @@ static int32_t normal_boot_verify(uint32_t a, uint32_t b, void *c)
 void auth_mod_init(void)
 {
 #if RCAR_SECURE_BOOT
-	uint32_t soft_md = mmio_read_32(MFISOFTMDR) & SOFTMD_BOOTMODE_MASK;
-	uint32_t md = mmio_read_32(RST_MODEMR) & MODEMR_MD5_MASK;
-	uint32_t lcs, ret;
-
-	secure_boot_api = (secure_boot_api_f) &rcar_rom_secure_boot_api;
-
-	ret = rcar_rom_get_lcs(&lcs);
-	if (ret) {
-		ERROR("BL2: Failed to get the LCS. (%d)\n", ret);
-		panic();
-	}
-
-	switch (lcs) {
-	case LCS_SE:
-		if (soft_md == SOFTMD_NORMALBOOT)
-			secure_boot_api = &normal_boot_verify;
-		break;
-	case LCS_SD:
-		secure_boot_api = &normal_boot_verify;
-		break;
-	default:
-		if (md >> MODEMR_MD5_SHIFT)
-			secure_boot_api = &normal_boot_verify;
-	}
-
-	NOTICE("BL2: %s boot\n",
-	       secure_boot_api == &normal_boot_verify ? "Normal" : "Secure");
+	NOTICE("BL2: Secure boot\n");
+	secure_boot_api = (fp_sec_module_api_t)&normal_boot_verify;
+	secure_boot_arg = NULL;
 #else
 	NOTICE("BL2: Normal boot\n");
-	secure_boot_api = &normal_boot_verify;
+	secure_boot_api = (fp_sec_module_api_t)&normal_boot_verify;
 #endif
 }
diff --git a/drivers/renesas/common/io/io_rcar.c b/drivers/renesas/common/io/io_rcar.c
index 43f9d6a7c..95c53f7c3 100644
--- a/drivers/renesas/common/io/io_rcar.c
+++ b/drivers/renesas/common/io/io_rcar.c
@@ -81,8 +81,8 @@ typedef struct {
 #define RCAR_FLASH_CERT_HEADER		RCAR_GET_FLASH_ADR(6U, 0U)
 #define RCAR_EMMC_CERT_HEADER		(0x00030000U)
 
-#define RCAR_COUNT_LOAD_BL33		(2U)
-#define RCAR_COUNT_LOAD_BL33X		(3U)
+#define RCAR_COUNT_LOAD_BL33		(4U)
+#define RCAR_COUNT_LOAD_BL33X		(5U)
 
 #define CHECK_IMAGE_AREA_CNT (5U)
 #define BOOT_BL2_ADDR (0xE6304000U)
@@ -99,18 +99,21 @@ static addr_loaded_t addr_loaded[CHECK_IMAGE_AREA_CNT] = {
 static uint32_t addr_loaded_cnt = 1;
 
 static const plat_rcar_name_offset_t name_offset[] = {
-	{BL31_IMAGE_ID, 0U, RCAR_ATTR_SET_ALL(0, 0, 0)},
+	{SEC_MODULE_ID,  0U, RCAR_ATTR_SET_ALL(0, 0, 0)},
+	{SEC_KEYRING_ID, 0U, RCAR_ATTR_SET_ALL(1, 0, 1)},
+
+	{BL31_IMAGE_ID, 0U, RCAR_ATTR_SET_ALL(2, 0, 2)},
 
 	/* BL3-2 is optional in the platform */
-	{BL32_IMAGE_ID, 0U, RCAR_ATTR_SET_ALL(1, 0, 1)},
-	{BL33_IMAGE_ID, 0U, RCAR_ATTR_SET_ALL(2, 0, 2)},
-	{BL332_IMAGE_ID, 0U, RCAR_ATTR_SET_ALL(3, 0, 3)},
-	{BL333_IMAGE_ID, 0U, RCAR_ATTR_SET_ALL(4, 0, 4)},
-	{BL334_IMAGE_ID, 0U, RCAR_ATTR_SET_ALL(5, 0, 5)},
-	{BL335_IMAGE_ID, 0U, RCAR_ATTR_SET_ALL(6, 0, 6)},
-	{BL336_IMAGE_ID, 0U, RCAR_ATTR_SET_ALL(7, 0, 7)},
-	{BL337_IMAGE_ID, 0U, RCAR_ATTR_SET_ALL(8, 0, 8)},
-	{BL338_IMAGE_ID, 0U, RCAR_ATTR_SET_ALL(9, 0, 9)},
+	{BL32_IMAGE_ID, 0U, RCAR_ATTR_SET_ALL(3, 0, 3)},
+	{BL33_IMAGE_ID, 0U, RCAR_ATTR_SET_ALL(4, 0, 4)},
+	{BL332_IMAGE_ID, 0U, RCAR_ATTR_SET_ALL(5, 0, 5)},
+	{BL333_IMAGE_ID, 0U, RCAR_ATTR_SET_ALL(6, 0, 6)},
+	{BL334_IMAGE_ID, 0U, RCAR_ATTR_SET_ALL(7, 0, 7)},
+	{BL335_IMAGE_ID, 0U, RCAR_ATTR_SET_ALL(8, 0, 8)},
+	{BL336_IMAGE_ID, 0U, RCAR_ATTR_SET_ALL(9, 0, 9)},
+	{BL337_IMAGE_ID, 0U, RCAR_ATTR_SET_ALL(10, 0, 10)},
+	{BL338_IMAGE_ID, 0U, RCAR_ATTR_SET_ALL(11, 0, 11)},
 };
 
 #if TRUSTED_BOARD_BOOT
@@ -136,8 +139,8 @@ static const plat_rcar_name_offset_t cert_offset[] = {
 static file_state_t current_file = { 0 };
 
 static uintptr_t rcar_handle, rcar_spec;
-static uint64_t rcar_image_header[RCAR_MAX_BL3X_IMAGE + 2U] = { 0U };
-static uint64_t rcar_image_header_prttn[RCAR_MAX_BL3X_IMAGE + 2U] = { 0U };
+static uint64_t rcar_image_header[RCAR_MAX_BL3X_IMAGE + 4U] = { 0U };
+static uint64_t rcar_image_header_prttn[RCAR_MAX_BL3X_IMAGE + 4U] = { 0U };
 static uint64_t rcar_image_number = { 0U };
 static uint32_t rcar_cert_load = { 0U };
 
@@ -181,7 +184,7 @@ static int32_t file_to_offset(const int32_t name, uintptr_t *offset,
 		}
 
 		addr = RCAR_ATTR_GET_CALCADDR(name_offset[i].attr);
-		if (rcar_image_number + 2U < addr) {
+		if (rcar_image_number + 4U < addr) {
 			continue;
 		}
 
@@ -504,7 +507,7 @@ static int32_t rcar_dev_init(io_dev_info_t *dev_info, const uintptr_t name)
 #endif
 
 	rcar_image_number = header[0];
-	for (i = 0; i < rcar_image_number + 2; i++) {
+	for (i = 0; i < rcar_image_number + 4; i++) {
 		rcar_image_header[i] = header[i * 2 + 1];
 		rcar_image_header_prttn[i] = header[i * 2 + 2];
 	}
@@ -522,7 +525,7 @@ static int32_t rcar_dev_init(io_dev_info_t *dev_info, const uintptr_t name)
 	}
 
 	rc = io_read(handle, RCAR_SDRAM_certESS,
-		     RCAR_CERT_SIZE * (2 + rcar_image_number), &cnt);
+		     RCAR_CERT_SIZE * (4 + rcar_image_number), &cnt);
 	if (rc != IO_SUCCESS) {
 		WARN("cert file read error.\n");
 		goto error;
@@ -530,7 +533,7 @@ static int32_t rcar_dev_init(io_dev_info_t *dev_info, const uintptr_t name)
 
 #if RCAR_BL2_DCACHE == 1
 	inv_dcache_range(RCAR_SDRAM_certESS,
-			 RCAR_CERT_SIZE * (2 + rcar_image_number));
+			 RCAR_CERT_SIZE * (4 + rcar_image_number));
 #endif
 
 	rcar_cert_load = RCAR_CERT_LOAD;
diff --git a/plat/renesas/common/bl2_plat_mem_params_desc.c b/plat/renesas/common/bl2_plat_mem_params_desc.c
index bf2706d53..08a83d00c 100644
--- a/plat/renesas/common/bl2_plat_mem_params_desc.c
+++ b/plat/renesas/common/bl2_plat_mem_params_desc.c
@@ -24,6 +24,36 @@
 extern uint64_t fdt_blob[PAGE_SIZE_4KB / sizeof(uint64_t)];
 
 static bl_mem_params_node_t bl2_mem_params_descs[] = {
+#if RCAR_SECURE_BOOT
+	{
+		.image_id = SEC_MODULE_ID,
+
+		SET_STATIC_PARAM_HEAD(ep_info, PARAM_EP, VERSION_2,
+		entry_point_info_t, SECURE | NON_EXECUTABLE),
+
+		SET_STATIC_PARAM_HEAD(image_info, PARAM_IMAGE_BINARY, VERSION_2,
+		image_info_t, 0),
+
+		.image_info.image_base = SEC_MODULE_BASE,
+		.image_info.image_max_size = SEC_MODULE_LIMIT - SEC_MODULE_BASE,
+
+		.next_handoff_image_id = INVALID_IMAGE_ID,
+	},
+	{
+		.image_id = SEC_KEYRING_ID,
+
+		SET_STATIC_PARAM_HEAD(ep_info, PARAM_EP, VERSION_2,
+		entry_point_info_t, SECURE | NON_EXECUTABLE),
+
+		SET_STATIC_PARAM_HEAD(image_info, PARAM_IMAGE_BINARY, VERSION_2,
+		image_info_t, 0),
+
+		.image_info.image_base = SEC_KEYRING_BASE,
+		.image_info.image_max_size = SEC_KEYRING_LIMIT - SEC_KEYRING_BASE,
+
+		.next_handoff_image_id = INVALID_IMAGE_ID,
+	},
+#endif
 	{
 		.image_id = BL31_IMAGE_ID,
 
diff --git a/plat/renesas/common/include/platform_def.h b/plat/renesas/common/include/platform_def.h
index ab071ec08..f57456eb1 100644
--- a/plat/renesas/common/include/platform_def.h
+++ b/plat/renesas/common/include/platform_def.h
@@ -68,6 +68,8 @@
 #define BL336_CERT_ID		(NS_BL2U_IMAGE_ID + 19)
 #define BL337_CERT_ID		(NS_BL2U_IMAGE_ID + 20)
 #define BL338_CERT_ID		(NS_BL2U_IMAGE_ID + 21)
+#define SEC_MODULE_ID		(NS_BL2U_IMAGE_ID + 22)
+#define SEC_KEYRING_ID		(NS_BL2U_IMAGE_ID + 23)
 
 /* io drivers id */
 #define FLASH_DEV_ID		U(0)
@@ -154,6 +156,17 @@
 #define BL33_COMP_SIZE		U(0x200000)
 #define BL33_COMP_BASE		(BL33_BASE - BL33_COMP_SIZE)
 
+/*******************************************************************************
+ * Security Module for Authentication
+ ******************************************************************************/
+#define SEC_MODULE_BASE		(RCAR_AUTH_MOD_BASE)
+#define SEC_MODULE_LIMIT	(SEC_MODULE_BASE + 0x1E000)
+
+#define SEC_KEYRING_BASE	(SEC_MODULE_LIMIT)
+#define SEC_KEYRING_LIMIT	(RCAR_AUTH_MOD_BASE + RCAR_AUTH_MOD_SIZE)
+
+#define SEC_MODULE_HEAP		U(0x50100000)
+
 /*******************************************************************************
  * Platform specific page table and MMU setup constants
  ******************************************************************************/
diff --git a/plat/renesas/common/include/rcar_def.h b/plat/renesas/common/include/rcar_def.h
index 68babff4b..e5766da22 100644
--- a/plat/renesas/common/include/rcar_def.h
+++ b/plat/renesas/common/include/rcar_def.h
@@ -40,6 +40,9 @@
 #define DRAM_PROTECTED_SIZE		ULL(0x03F00000)
 #define RCAR_BL31_CRASH_BASE		U(0x4403F000)
 #define RCAR_BL31_CRASH_SIZE		U(0x00001000)
+#define RCAR_AUTH_MOD_BASE		U(0x440E0000)
+#define RCAR_AUTH_MOD_SIZE		U(0x00020000)
+
 /* Entrypoint mailboxes */
 #define MBOX_BASE			RCAR_SHARED_MEM_BASE
 #define MBOX_SIZE			0x200
diff --git a/plat/renesas/common/plat_storage.c b/plat/renesas/common/plat_storage.c
index 652456103..5fbaca17a 100644
--- a/plat/renesas/common/plat_storage.c
+++ b/plat/renesas/common/plat_storage.c
@@ -73,89 +73,13 @@ static const io_block_spec_t bl338_file_spec = {
 	.offset = BL338_IMAGE_ID,
 };
 
-#if TRUSTED_BOARD_BOOT
-static const io_block_spec_t trusted_key_cert_file_spec = {
-	.offset = TRUSTED_KEY_CERT_ID,
+#if RCAR_SECURE_BOOT
+static const io_block_spec_t secmod_file_spec = {
+	.offset = SEC_MODULE_ID,
 };
 
-static const io_block_spec_t bl31_key_cert_file_spec = {
-	.offset = SOC_FW_KEY_CERT_ID,
-};
-
-static const io_block_spec_t bl32_key_cert_file_spec = {
-	.offset = TRUSTED_OS_FW_KEY_CERT_ID,
-};
-
-static const io_block_spec_t bl33_key_cert_file_spec = {
-	.offset = NON_TRUSTED_FW_KEY_CERT_ID,
-};
-
-static const io_block_spec_t bl332_key_cert_file_spec = {
-	.offset = BL332_KEY_CERT_ID,
-};
-
-static const io_block_spec_t bl333_key_cert_file_spec = {
-	.offset = BL333_KEY_CERT_ID,
-};
-
-static const io_block_spec_t bl334_key_cert_file_spec = {
-	.offset = BL334_KEY_CERT_ID,
-};
-
-static const io_block_spec_t bl335_key_cert_file_spec = {
-	.offset = BL335_KEY_CERT_ID,
-};
-
-static const io_block_spec_t bl336_key_cert_file_spec = {
-	.offset = BL336_KEY_CERT_ID,
-};
-
-static const io_block_spec_t bl337_key_cert_file_spec = {
-	.offset = BL337_KEY_CERT_ID,
-};
-
-static const io_block_spec_t bl338_key_cert_file_spec = {
-	.offset = BL338_KEY_CERT_ID,
-};
-
-static const io_block_spec_t bl31_cert_file_spec = {
-	.offset = SOC_FW_CONTENT_CERT_ID,
-};
-
-static const io_block_spec_t bl32_cert_file_spec = {
-	.offset = TRUSTED_OS_FW_CONTENT_CERT_ID,
-};
-
-static const io_block_spec_t bl33_cert_file_spec = {
-	.offset = NON_TRUSTED_FW_CONTENT_CERT_ID,
-};
-
-static const io_block_spec_t bl332_cert_file_spec = {
-	.offset = BL332_CERT_ID,
-};
-
-static const io_block_spec_t bl333_cert_file_spec = {
-	.offset = BL333_CERT_ID,
-};
-
-static const io_block_spec_t bl334_cert_file_spec = {
-	.offset = BL334_CERT_ID,
-};
-
-static const io_block_spec_t bl335_cert_file_spec = {
-	.offset = BL335_CERT_ID,
-};
-
-static const io_block_spec_t bl336_cert_file_spec = {
-	.offset = BL336_CERT_ID,
-};
-
-static const io_block_spec_t bl337_cert_file_spec = {
-	.offset = BL337_CERT_ID,
-};
-
-static const io_block_spec_t bl338_cert_file_spec = {
-	.offset = BL338_CERT_ID,
+static const io_block_spec_t seckey_file_spec = {
+	.offset = SEC_KEYRING_ID,
 };
 #endif
 
@@ -218,94 +142,17 @@ static const struct plat_io_policy policies[] = {
 			    &rcar_dev_handle,
 			    (uintptr_t) &bl338_file_spec,
 			    &open_rcar},
-#if TRUSTED_BOARD_BOOT
-	[TRUSTED_KEY_CERT_ID] = {
-				 &rcar_dev_handle,
-				 (uintptr_t) &trusted_key_cert_file_spec,
-				 &open_rcar},
-	[SOC_FW_KEY_CERT_ID] = {
-				&rcar_dev_handle,
-				(uintptr_t) &bl31_key_cert_file_spec,
-				&open_rcar},
-	[TRUSTED_OS_FW_KEY_CERT_ID] = {
-				       &rcar_dev_handle,
-				       (uintptr_t) &bl32_key_cert_file_spec,
-				       &open_rcar},
-	[NON_TRUSTED_FW_KEY_CERT_ID] = {
-					&rcar_dev_handle,
-					(uintptr_t) &bl33_key_cert_file_spec,
-					&open_rcar},
-	[BL332_KEY_CERT_ID] = {
-			       &rcar_dev_handle,
-			       (uintptr_t) &bl332_key_cert_file_spec,
-			       &open_rcar},
-	[BL333_KEY_CERT_ID] = {
-			       &rcar_dev_handle,
-			       (uintptr_t) &bl333_key_cert_file_spec,
-			       &open_rcar},
-	[BL334_KEY_CERT_ID] = {
-			       &rcar_dev_handle,
-			       (uintptr_t) &bl334_key_cert_file_spec,
-			       &open_rcar},
-	[BL335_KEY_CERT_ID] = {
-			       &rcar_dev_handle,
-			       (uintptr_t) &bl335_key_cert_file_spec,
-			       &open_rcar},
-	[BL336_KEY_CERT_ID] = {
-			       &rcar_dev_handle,
-			       (uintptr_t) &bl336_key_cert_file_spec,
-			       &open_rcar},
-	[BL337_KEY_CERT_ID] = {
-			       &rcar_dev_handle,
-			       (uintptr_t) &bl337_key_cert_file_spec,
-			       &open_rcar},
-	[BL338_KEY_CERT_ID] = {
-			       &rcar_dev_handle,
-			       (uintptr_t) &bl338_key_cert_file_spec,
-			       &open_rcar},
-	[SOC_FW_CONTENT_CERT_ID] = {
-				    &rcar_dev_handle,
-				    (uintptr_t) &bl31_cert_file_spec,
-				    &open_rcar},
-	[TRUSTED_OS_FW_CONTENT_CERT_ID] = {
-					   &rcar_dev_handle,
-					   (uintptr_t) &bl32_cert_file_spec,
-					   &open_rcar},
-	[NON_TRUSTED_FW_CONTENT_CERT_ID] = {
-					    &rcar_dev_handle,
-					    (uintptr_t) &bl33_cert_file_spec,
-					    &open_rcar},
-	[BL332_CERT_ID] = {
-			   &rcar_dev_handle,
-			   (uintptr_t) &bl332_cert_file_spec,
-			   &open_rcar},
-	[BL333_CERT_ID] = {
-			   &rcar_dev_handle,
-			   (uintptr_t) &bl333_cert_file_spec,
-			   &open_rcar},
-	[BL334_CERT_ID] = {
-			   &rcar_dev_handle,
-			   (uintptr_t) &bl334_cert_file_spec,
-			   &open_rcar},
-	[BL335_CERT_ID] = {
-			   &rcar_dev_handle,
-			   (uintptr_t) &bl335_cert_file_spec,
-			   &open_rcar},
-	[BL336_CERT_ID] = {
-			   &rcar_dev_handle,
-			   (uintptr_t) &bl336_cert_file_spec,
-			   &open_rcar},
-	[BL337_CERT_ID] = {
-			   &rcar_dev_handle,
-			   (uintptr_t) &bl337_cert_file_spec,
-			   &open_rcar},
-	[BL338_CERT_ID] = {
-			   &rcar_dev_handle,
-			   (uintptr_t) &bl338_cert_file_spec,
-			   &open_rcar}, {
-#else
-					{
+#if RCAR_SECURE_BOOT
+	[SEC_MODULE_ID] = {
+			    &rcar_dev_handle,
+			    (uintptr_t) &secmod_file_spec,
+			    &open_rcar},
+	[SEC_KEYRING_ID] = {
+			    &rcar_dev_handle,
+			    (uintptr_t) &seckey_file_spec,
+			    &open_rcar},
 #endif
+					{
 					 0, 0, 0}
 };
 
diff --git a/plat/renesas/rzg/platform.mk b/plat/renesas/rzg/platform.mk
index 8bb518b85..a870b8099 100644
--- a/plat/renesas/rzg/platform.mk
+++ b/plat/renesas/rzg/platform.mk
@@ -100,16 +100,6 @@ RCAR_SECURE_BOOT := 0
 endif
 $(eval $(call add_define,RCAR_SECURE_BOOT))
 
-# LCS state of RZ/G2 Chip is all CM.
-# However certain chips(RZ/G2M and RZ/G2E) have incorrect factory Fuse settings
-# which results in getting incorrect LCS states
-# if need to enable RCAR_SECURE_BOOT, make sure the chip has proper factory Fuse settings.
-ifeq (${RCAR_SECURE_BOOT},1)
-  ifeq (${RZG_LCS_STATE_DETECTION_ENABLE},0)
-    $(error "Error: Please check the chip has proper factory Fuse settings and set RZG_LCS_STATE_DETECTION_ENABLE to enable.")
-  endif
-endif
-
 # lock RPC HYPERFLASH access by default
 # unlock to repogram the ATF firmware from u-boot
 ifndef RCAR_RPC_HYPERFLASH_LOCKED
diff --git a/tools/renesas/rzg_layout_create/sa6.c b/tools/renesas/rzg_layout_create/sa6.c
index 76e3dc5e3..d9d57ea6d 100644
--- a/tools/renesas/rzg_layout_create/sa6.c
+++ b/tools/renesas/rzg_layout_create/sa6.c
@@ -13,6 +13,14 @@
 
 /* Number of content cert for Non-secure Target Program(BL33x) */
 #define RCAR_IMAGE_NUM			(0x00000001U)
+/* Source address on Security Module */
+#define SEC_MODSRC_ADDRESS		(0x00400000U)
+/* Reserved */
+#define SEC_MOD_PARTITION		(0x00000000U)
+/* Source address on Trusted Keyring */
+#define SEC_KEYSRC_ADDRESS		(0x00500000U)
+/* Reserved */
+#define SEC_KEY_PARTITION		(0x00000000U)
 /* Source address on flash for BL31 */
 #define RCAR_BL31SRC_ADDRESS		(0x001C0000U)
 /* Reserved */
@@ -87,6 +95,16 @@
 
 #endif /* RCAR_SA6_TYPE == RCAR_SA6_TYPE_QSPIFLASH */
 
+/* Destination address for Security Module */
+#define SEC_MODDST_ADDRESS		(0x440E0000U)
+#define SEC_MODDST_ADDRESSH		(0x00000000U)
+/* Destination size for Security Module */
+#define SEC_MODDST_SIZE			(0x00007800U)
+/* Destination address for Secure Keys */
+#define SEC_KEYDST_ADDRESS		(0x440FE000U)
+#define SEC_KEYDST_ADDRESSH		(0x00000000U)
+/* Destination size for Secure Keys */
+#define SEC_KEYDST_SIZE			(0x00000400U)
 /* Destination address for BL31 */
 #define RCAR_BL31DST_ADDRESS		(0x44000000U)
 #define RCAR_BL31DST_ADDRESSH		(0x00000000U)
@@ -134,6 +152,14 @@
 /* SA6 */
 const uint64_t __attribute__ ((section(".sa6_image_num")))
 				image_num	= RCAR_IMAGE_NUM;
+const uint64_t __attribute__ ((section (".sa6_secmodsrc_addr")))
+				secmodsrc_addr  = SEC_MODSRC_ADDRESS;
+const uint64_t __attribute__ ((section (".sa6_secmodpartition")))
+				secmodpartition = SEC_MOD_PARTITION;
+const uint64_t __attribute__ ((section (".sa6_seckeysrc_addr")))
+				seckeysrc_addr  = SEC_KEYSRC_ADDRESS;
+const uint64_t __attribute__ ((section (".sa6_seckeypartition")))
+				seckeypartition = SEC_KEY_PARTITION;
 const uint64_t __attribute__ ((section(".sa6_bl31src_addr")))
 				bl31src_addr	= RCAR_BL31SRC_ADDRESS;
 const uint64_t __attribute__ ((section(".sa6_bl31partition")))
@@ -174,6 +200,18 @@ const uint64_t __attribute__ ((section(".sa6_bl338src_addr")))
 				bl338src_addr	= RCAR_BL338SRC_ADDRESS;
 const uint64_t __attribute__ ((section(".sa6_bl338partition")))
 				bl338partition	= RCAR_BL338_PARTITION;
+const uint32_t __attribute__ ((section (".sa6_secmoddst_addr")))
+				secmoddst_addr  = SEC_MODDST_ADDRESS;
+const uint32_t __attribute__ ((section (".sa6_secmoddst_addrh")))
+				secmoddst_addrh = SEC_MODDST_ADDRESSH;
+const uint32_t __attribute__ ((section (".sa6_secmoddst_size")))
+				secmoddst_size  = SEC_MODDST_SIZE;
+const uint32_t __attribute__ ((section (".sa6_seckeydst_addr")))
+				seckeydst_addr  = SEC_KEYDST_ADDRESS;
+const uint32_t __attribute__ ((section (".sa6_seckeydst_addrh")))
+				seckeydst_addrh = SEC_KEYDST_ADDRESSH;
+const uint32_t __attribute__ ((section (".sa6_seckeydst_size")))
+				seckeydst_size  = SEC_KEYDST_SIZE;
 const uint32_t __attribute__ ((section(".sa6_bl31dst_addr")))
 				bl31dst_addr	= RCAR_BL31DST_ADDRESS;
 const uint32_t __attribute__ ((section(".sa6_bl31dst_addrh")))
diff --git a/tools/renesas/rzg_layout_create/sa6.ld.S b/tools/renesas/rzg_layout_create/sa6.ld.S
index efe40b0c8..5820d9722 100644
--- a/tools/renesas/rzg_layout_create/sa6.ld.S
+++ b/tools/renesas/rzg_layout_create/sa6.ld.S
@@ -7,107 +7,135 @@
 SECTIONS
 {
 	. = 0x00000000;
-	.rodata : {
+	.image_num : {
 		KEEP(*(.sa6_image_num))
 		. = 0x00000008;
+	}
+	.src_addr_sec : {
+		KEEP(*(.sa6_secmodsrc_addr))
+		. = 0x00000008;
+		KEEP(*(.sa6_secmodpartition))
+		. = 0x000000010;
+		KEEP(*(.sa6_seckeysrc_addr))
+		. = 0x000000018;
+		KEEP(*(.sa6_seckeypartition))
+		. = 0x00000020;
+	}
+	.src_addr : {
 		KEEP(*(.sa6_bl31src_addr))
-		. = 0x00000010;
+		. = 0x00000008;
 		KEEP(*(.sa6_bl31partition))
-		. = 0x00000018;
+		. = 0x00000010;
 		KEEP(*(.sa6_bl32src_addr))
-		. = 0x00000020;
+		. = 0x00000018;
 		KEEP(*(.sa6_bl32partition))
-		. = 0x00000028;
+		. = 0x00000020;
 		KEEP(*(.sa6_bl33src_addr))
-		. = 0x00000030;
+		. = 0x00000028;
 		KEEP(*(.sa6_bl33partition))
-		. = 0x00000038;
+		. = 0x00000030;
 		KEEP(*(.sa6_bl332src_addr))
-		. = 0x00000040;
+		. = 0x00000038;
 		KEEP(*(.sa6_bl332partition))
-		. = 0x00000048;
+		. = 0x00000040;
 		KEEP(*(.sa6_bl333src_addr))
-		. = 0x00000050;
+		. = 0x00000048;
 		KEEP(*(.sa6_bl333partition))
-		. = 0x00000058;
+		. = 0x00000050;
 		KEEP(*(.sa6_bl334src_addr))
-		. = 0x00000060;
+		. = 0x00000058;
 		KEEP(*(.sa6_bl334partition))
-		. = 0x00000068;
+		. = 0x00000060;
 		KEEP(*(.sa6_bl335src_addr))
-		. = 0x00000070;
+		. = 0x00000068;
 		KEEP(*(.sa6_bl335partition))
-		. = 0x00000078;
+		. = 0x00000070;
 		KEEP(*(.sa6_bl336src_addr))
-		. = 0x00000080;
+		. = 0x00000078;
 		KEEP(*(.sa6_bl336partition))
-		. = 0x00000088;
+		. = 0x00000080;
 		KEEP(*(.sa6_bl337src_addr))
-		. = 0x00000090;
+		. = 0x00000088;
 		KEEP(*(.sa6_bl337partition))
-		. = 0x00000098;
+		. = 0x00000090;
 		KEEP(*(.sa6_bl338src_addr))
-		. = 0x000000A0;
+		. = 0x00000098;
 		KEEP(*(.sa6_bl338partition))
-		. = 0x00000554;
+	}
+	. = 0x00000554;
+	.dst_addr_sec : {
+		KEEP(*(.sa6_secmoddst_addr))
+		. = 0x00000004;
+		KEEP(*(.sa6_secmoddst_addrh))
+		. = 0x00000110;
+		KEEP(*(.sa6_secmoddst_size))
+		. = 0x00000800;
+		KEEP(*(.sa6_seckeydst_addr))
+		. = 0x00000804;
+		KEEP(*(.sa6_seckeydst_addrh))
+		. = 0x00000910;
+		KEEP(*(.sa6_seckeydst_size))
+		. = 0x00001000;
+	}
+	.dst_addr : {
 		KEEP(*(.sa6_bl31dst_addr))
-		. = 0x00000558;
+		. = 0x00000004;
 		KEEP(*(.sa6_bl31dst_addrh))
-		. = 0x00000664;
+		. = 0x00000110;
 		KEEP(*(.sa6_bl31dst_size))
-		. = 0x00000D54;
+		. = 0x00000800;
 		KEEP(*(.sa6_bl32dst_addr))
-		. = 0x00000D58;
+		. = 0x00000804;
 		KEEP(*(.sa6_bl32dst_addrh))
-		. = 0x00000E64;
+		. = 0x00000910;
 		KEEP(*(.sa6_bl32dst_size))
-		. = 0x00001554;
+		. = 0x00001000;
 		KEEP(*(.sa6_bl33dst_addr))
-		. = 0x00001558;
+		. = 0x00001004;
 		KEEP(*(.sa6_bl33dst_addrh))
-		. = 0x00001664;
+		. = 0x00001110;
 		KEEP(*(.sa6_bl33dst_size))
-		. = 0x00001D54;
+		. = 0x00001800;
 		KEEP(*(.sa6_bl332dst_addr))
-		. = 0x00001D58;
+		. = 0x00001804;
 		KEEP(*(.sa6_bl332dst_addrh))
-		. = 0x00001E64;
+		. = 0x00001910;
 		KEEP(*(.sa6_bl332dst_size))
-		. = 0x00002554;
+		. = 0x00002000;
 		KEEP(*(.sa6_bl333dst_addr))
-		. = 0x00002558;
+		. = 0x00002004;
 		KEEP(*(.sa6_bl333dst_addrh))
-		. = 0x00002664;
+		. = 0x00002110;
 		KEEP(*(.sa6_bl333dst_size))
-		. = 0x00002D54;
+		. = 0x00002800;
 		KEEP(*(.sa6_bl334dst_addr))
-		. = 0x00002D58;
+		. = 0x00002804;
 		KEEP(*(.sa6_bl334dst_addrh))
-		. = 0x00002E64;
+		. = 0x00002910;
 		KEEP(*(.sa6_bl334dst_size))
-		. = 0x00003554;
+		. = 0x00003000;
 		KEEP(*(.sa6_bl335dst_addr))
-		. = 0x00003558;
+		. = 0x00003004;
 		KEEP(*(.sa6_bl335dst_addrh))
-		. = 0x00003664;
+		. = 0x00003110;
 		KEEP(*(.sa6_bl335dst_size))
-		. = 0x00003D54;
+		. = 0x00003800;
 		KEEP(*(.sa6_bl336dst_addr))
-		. = 0x00003D58;
+		. = 0x00003804;
 		KEEP(*(.sa6_bl336dst_addrh))
-		. = 0x00003E64;
+		. = 0x00003910;
 		KEEP(*(.sa6_bl336dst_size))
-		. = 0x00004554;
+		. = 0x00004000;
 		KEEP(*(.sa6_bl337dst_addr))
-		. = 0x00004558;
+		. = 0x00004004;
 		KEEP(*(.sa6_bl337dst_addrh))
-		. = 0x00004664;
+		. = 0x00004110;
 		KEEP(*(.sa6_bl337dst_size))
-		. = 0x00004D54;
+		. = 0x00004800;
 		KEEP(*(.sa6_bl338dst_addr))
-		. = 0x00004D58;
+		. = 0x00004804;
 		KEEP(*(.sa6_bl338dst_addrh))
-		. = 0x00004E64;
+		. = 0x00004910;
 		KEEP(*(.sa6_bl338dst_size))
 	}
 
-- 
2.17.1

